name: Build distributions

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'
      
jobs:
  build-engine:
    runs-on: ubuntu-latest
    steps:
      - name: Install requirements
        run: sudo apt install libarchive-tools
      - name: Download Alpine minirootfs
        run: wget https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/x86_64/alpine-minirootfs-3.15.0-x86_64.tar.gz
      - name: Unpack Alpine minirootfs
        run: |
          mkdir minirootfs
          bsdtar -xpf alpine-minirootfs-3.15.0-x86_64.tar.gz -C minirootfs
      - name: Chroot Alpine minirootfs
        run: |
          sudo cp /etc/resolv.conf ./minirootfs/etc/resolv.conf
          sudo chroot ./minirootfs /bin/ash -c "apk update"
          sudo chroot ./minirootfs /bin/ash -c "apk add docker"
          sudo chroot ./minirootfs /bin/ash -c "rm -f /etc/docker/daemon.json"
          sudo cp Resources/daemon.json ./minirootfs/etc/docker/
          sudo rm ./minirootfs/etc/resolv.conf
      - name: Create tarball from minirootfs
        run: bsdtar -a -cf WinthainerEngine.tar.gz ./minirootfs
      - name: Upload distribution
        uses: actions/upload-artifact@v2
        with:
          name: WinthainerEngine.tar.gz
          path: ./WinthainerEngine.tar.gz
          retention-days: 7
  build-data:
    runs-on: ubuntu-latest
    steps:
      - name: Download Alpine minirootfs
        run: wget https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/x86_64/alpine-minirootfs-3.15.0-x86_64.tar.gz
      - name: Upload distribution
        uses: actions/upload-artifact@v2
        with:
          name: WinthainerData.tar.gz
          path: ./alpine-minirootfs-3.15.0-x86_64.tar.gz
          retention-days: 7